{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . xsd \u00b6 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:tns=\"http://mapservices.prorail.nl/storingen/schema/geocoderen_2\" targetNamespace=\"http://mapservices.prorail.nl/storingen/schema/geocoderen_2\" elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\" version=\"1\"> <xs:element name=\"GeocodePunten\" type=\"tns:GeocodePunten_Type\"/> <xs:complexType name=\"GeocodePunten_Type\"> <xs:sequence> <xs:element name=\"Name\" type=\"xs:string\" default=\"JSONFeatue\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Name of the feature</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"Type\" type=\"xs:string\" default=\"GeocodePunten\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Type of feature</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"Features\" type=\"tns:Feature_Type\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"Feature_Type\"> <xs:sequence> <xs:element name=\"Geocode\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Geocode value.</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"Geometry\" type=\"tns:Geometry_Type\" minOccurs=\"1\" maxOccurs=\"1\"/> <xs:element name=\"Properties\" type=\"tns:Properties_Type\" minOccurs=\"1\" maxOccurs=\"1\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"Geometry_Type\"> <xs:sequence> <xs:element name=\"Type\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Type of geometry</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"CoordinatesRD\" type=\"tns:Punten_Type\" minOccurs=\"2\" maxOccurs=\"2\"/> <xs:element name=\"CoordinatesWGS\" type=\"tns:Punten_Type\" minOccurs=\"2\" maxOccurs=\"2\"> <xs:annotation> <xs:documentation>Coordinates in WGS system</xs:documentation> </xs:annotation> </xs:element> </xs:sequence> </xs:complexType> <xs:complexType name=\"Properties_Type\"> <xs:sequence> <xs:element name=\"Punten\" type=\"tns:Punten_Type\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> <xs:element name=\"PartitionKey\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Partition key value</xs:documentation> </xs:annotation> </xs:element> </xs:sequence> </xs:complexType> <xs:complexType name=\"Punten_Type\"> <xs:sequence> <xs:element name=\"Punt\" type=\"xs:float\" default=\"0\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Punten value</xs:documentation> </xs:annotation> </xs:element> </xs:sequence> </xs:complexType> </xs:schema> Project layout \u00b6 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. demoootje \u00b6 demo linkjes \u00b6 links Tutorial \u00b6 This is my tutorial.. images \u00b6 Person \u00b6 Properties \u00b6 firstName (string) : The person's first name. lastName (string) : The person's last name. age (integer) : Age in years which must be equal to or greater than zero. Minimum: 0 .","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#xsd","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 <?xml version=\"1.0\" encoding=\"UTF-8\"?> <xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:tns=\"http://mapservices.prorail.nl/storingen/schema/geocoderen_2\" targetNamespace=\"http://mapservices.prorail.nl/storingen/schema/geocoderen_2\" elementFormDefault=\"qualified\" attributeFormDefault=\"unqualified\" version=\"1\"> <xs:element name=\"GeocodePunten\" type=\"tns:GeocodePunten_Type\"/> <xs:complexType name=\"GeocodePunten_Type\"> <xs:sequence> <xs:element name=\"Name\" type=\"xs:string\" default=\"JSONFeatue\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Name of the feature</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"Type\" type=\"xs:string\" default=\"GeocodePunten\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Type of feature</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"Features\" type=\"tns:Feature_Type\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"Feature_Type\"> <xs:sequence> <xs:element name=\"Geocode\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Geocode value.</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"Geometry\" type=\"tns:Geometry_Type\" minOccurs=\"1\" maxOccurs=\"1\"/> <xs:element name=\"Properties\" type=\"tns:Properties_Type\" minOccurs=\"1\" maxOccurs=\"1\"/> </xs:sequence> </xs:complexType> <xs:complexType name=\"Geometry_Type\"> <xs:sequence> <xs:element name=\"Type\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Type of geometry</xs:documentation> </xs:annotation> </xs:element> <xs:element name=\"CoordinatesRD\" type=\"tns:Punten_Type\" minOccurs=\"2\" maxOccurs=\"2\"/> <xs:element name=\"CoordinatesWGS\" type=\"tns:Punten_Type\" minOccurs=\"2\" maxOccurs=\"2\"> <xs:annotation> <xs:documentation>Coordinates in WGS system</xs:documentation> </xs:annotation> </xs:element> </xs:sequence> </xs:complexType> <xs:complexType name=\"Properties_Type\"> <xs:sequence> <xs:element name=\"Punten\" type=\"tns:Punten_Type\" minOccurs=\"1\" maxOccurs=\"unbounded\"/> <xs:element name=\"PartitionKey\" type=\"xs:string\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Partition key value</xs:documentation> </xs:annotation> </xs:element> </xs:sequence> </xs:complexType> <xs:complexType name=\"Punten_Type\"> <xs:sequence> <xs:element name=\"Punt\" type=\"xs:float\" default=\"0\" minOccurs=\"1\" maxOccurs=\"1\"> <xs:annotation> <xs:documentation>Punten value</xs:documentation> </xs:annotation> </xs:element> </xs:sequence> </xs:complexType> </xs:schema>","title":"xsd"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#demoootje","text":"demo","title":"demoootje"},{"location":"#linkjes","text":"links","title":"linkjes"},{"location":"#tutorial","text":"This is my tutorial..","title":"Tutorial"},{"location":"#images","text":"","title":"images"},{"location":"#person","text":"","title":"Person"},{"location":"#properties","text":"firstName (string) : The person's first name. lastName (string) : The person's last name. age (integer) : Age in years which must be equal to or greater than zero. Minimum: 0 .","title":"Properties"},{"location":"demo/","text":"PlantUML examples \u00b6 PlantUML is a software tool that uses text formatting to create graphic diagrams. This page introduces PlantUML by showing examples with diagrams and source code, for UML, ERD, wireframes, mind maps, JSON, YAML, WBS, ASCII art, Gantt charts, C4 models, and more. Sequence diagram \u00b6 View Source @startuml skinparam monochrome true Alpha -> Bravo Bravo -> Alpha @enduml Sequence diagram with steps and divider \u00b6 View Source @startuml skinparam monochrome true Alpha -> Bravo: Step 1 Bravo -> Charlie: Step 2 == My Divider == Charlie -> Bravo: Step 3 Bravo -> Alpha: Step 4 @enduml Sequence diagram with participant shapes \u00b6 View Source @startuml skinparam monochrome true participant Participant as Foo actor Actor as Foo1 boundary Boundary as Foo2 control Control as Foo3 entity Entity as Foo4 database Database as Foo5 collections Collections as Foo6 queue Queue as Foo7 Foo -> Foo1 : To actor Foo -> Foo2 : To boundary Foo -> Foo3 : To control Foo -> Foo4 : To entity Foo -> Foo5 : To database Foo -> Foo6 : To collections Foo -> Foo7: To queue @enduml Usecase diagram \u00b6 View Source @startuml skinparam monochrome true left to right direction User1 --> (Story1) (Story1) --> (Story2) (Story2) --> (Story3) @enduml Object diagram \u00b6 View Source @startuml skinparam monochrome true object Object1 { Alpha Bravo } object Object2 { Charlie Delta } object Object3 { Echo Foxtrot } Object1 < |-- Object2 Object1 < |-- Object3 @enduml Class diagram \u00b6 View Source @startuml skinparam monochrome true ' If you want to hide the \"C\" circle, then uncomment this line: ' hide circle class Class1 { {field} Alpha {method} Bravo } class Class2 { {field} Charlie {method} Delta } class Class3 { {field} Echo {method} Foxtrot } Class1 < |--o Class2 Class1 < |--* Class3 @enduml Entity relationship diagram (ERD) \u00b6 View Source @startuml skinparam monochrome true skinparam linetype ortho ' If you want to hide the \"E\" circle, then uncomment this line: ' hide circle entity Entity1 { Alpha Bravo } entity Entity2 { Charlie Delta } entity Entity3 { Echo Foxtrot } Entity1 }o-down-o{ Entity2 Entity1 }o-down-o{ Entity3 @enduml Package styles \u00b6 View Source @startuml package \"Demo Node\" < > { object Object1 } package \"Demo Rectangle\" < > { object Object2 } package \"Demo Folder\" < > { object Object3 } package \"Demo Frame\" < > { object Object4 } package \"Demo Cloud\" < > { object Object5 } package \"Demo Database\" < > { object Object6 } @enduml Activity diagram \u00b6 View Source @startuml skinparam monochrome true start -> Starting; :Activity 1; if (Question) then (yes) :Option 1; else (no) :Option 2; endif :Activity 2; -> Stopping; stop @enduml Component diagram of items \u00b6 View Source @startuml skinparam monochrome true component \"Component\" interface \"Interface\" database \"Database\" cloud \"Cloud\" node \"Node\" package \"Package\" @enduml State diagram \u00b6 View Source @startuml skinparam monochrome true [*] --> State1 : Start State1 -> State2 : Change1 State2 -> State3 : Change2 State3 --> [*] : Stop State1 : Description 1 State2 : Description 2 State3 : Description 3 @enduml Deployment diagram items \u00b6 View Source @startuml skinparam monochrome true actor actor agent agent artifact artifact boundary boundary card card circle circle cloud cloud collections collections component component control control database database entity entity file file folder folder frame frame hexagon hexagon interface interface label label node node package package person person queue queue rectangle rectangle stack stack storage storage usecase usecase @enduml Timing diagram \u00b6 View Source @startuml skinparam monochrome true concise \"My Timeline\" as T @T 0 is Alpha +100 is Bravo +100 is Charlie @50 < -> @+100 : My Note @enduml Diagrams through ASCII art (DITAA) \u00b6 View Source @startuml ditaa +--------+ +-------+ +-------+ | +---+ ditaa +--> | | | Text | +-------+ |diagram| |Document| |!magic!| | | | {d}| | | | | +---+----+ +-------+ +-------+ : ^ | Lots of work | +-------------------------+ @enduml Wireframe \u00b6 View Source @startuml salt { Hello world [Button] () Radio 1 (X) Radio 2 [] Checkbox 1 [X] Checkbox 2 \"Enter text here \" ^This is a droplist^ } @enduml Gantt chart \u00b6 View Source @startgantt skinparam monochrome true [Task1] on {Alice} lasts 8 days then [Task2] on {Bob} lasts 4 days at 50% then [Task3] on {Carol} lasts 2 days at 25% @endgantt Mind map \u00b6 View Source @startmindmap + C ++ D ++ E -- A -- B @endmindmap JSON data \u00b6 View Source @startjson { \"fruit\":\"Apple\", \"size\":\"Large\", \"color\": [\"Red\", \"Green\"] } @endjson YAML data \u00b6 View Source @startyaml fruit: Apple size: Large color: - Red - Green @endyaml Network diagram \u00b6 View Source @startuml nwdiag { network dmz { address = \"210.x.x.x/24\" web01 [address = \"210.x.x.1\"]; web02 [address = \"210.x.x.2\"]; } } @enduml Work breakdown structure (WBS) \u00b6 View Source @startwbs * Top ** A *** A1 *** A2 ** B *** B1 *** B2 @endwbs OpenIconic \u00b6 View Source @startuml title: < &heart> Demo < &heart> @enduml OpenIconic provides open source icons. OpenIconic is now built-in to PlantUML. Font Awesome \u00b6 View Source @startuml skinparam monochrome true !include <font-awesome/star> rectangle \" < $star>\" @enduml Procedure \u00b6 View Source @startuml !procedure $demo($name, $headline, $description) card $name as \"\\n $headline \\n\\n $description \\n\" !endprocedure $demo(MyCard, \"Hello World\", \"This is a demonstration\") @enduml Procedure layout \u00b6 View Source @startuml skinparam monochrome true skinparam defaultTextAlignment center !procedure $layout($shape, $name, $openiconic, $headline, $description) $shape $name as \"\\n\\n < &$openiconic> \\n $headline \\n\\n $description \\n\\n\" !endprocedure $layout(card, MyCard, heart, \"Hello World\", \"This is a demonstration\") @enduml This shows how to create your own procedure to create a custom layout with a shape, object name, OpenIconic icon, headline that uses big size text, and a description that uses normal size text. Area diagram \u00b6 The area diagram is an example deployment diagram that shows a bunch of areas and how they interrlate. This example is useful for seeing a real-world diagram, that uses boxes, arrows, Font Awesome icons, multi-line text, Unicode padding, font sizes, and more. View Source @startuml skinparam monochrome true skinparam defaultTextAlignment center ' icons !include !include !include !include !include !include !include !include !include !include !include ' Pipeline objects stack \"\" Example \\n\\nexample\\nexample\\nexample\"\" as StackLeft card \" < $cubes>\\n Example \\n\\n example, example, example \\n\\n\" as Pipeline1 queue \" < $check_circle>\\n Example \\n\\n example, example, example \\n\\n\" as Pipeline2 card \" < $cloud>\\n Example \\n\\n example, example, example \\n\\n\" as Pipeline3 stack \" Example \\n\\nexample\\nexample\\nexample\" as StackRight ' Pipeline flow StackLeft -r-> Pipeline1 : \"Example\" Pipeline1 -r-> Pipeline2 : \"Example\" Pipeline2 -r-> Pipeline3 : \"Example\" Pipeline3 -r-> StackRight : \"Example\" ' Left side interface \"Example\" as InterfaceLeft InterfaceLeft -u-> StackLeft ' Right side interface \"Example\" as InterfaceRight InterfaceRight -u-> StackRight ' Actor 1 actor \"Actor 1\" as Actor1 usecase \"\\n < $file_image_o>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase1 Actor1 -d-> UseCase1 UseCase1 -d-> Pipeline1 ' Actor 2 actor \"Actor 2\" as Actor2 usecase \"\\n < $file_code_o>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase2 Actor2 -d-> UseCase2 UseCase2 -d-> Pipeline1 ' Actor 3 actor \"Actor 3\" as Actor3 usecase \"\\n < $exchange>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase3 Actor3 -d-> UseCase3 UseCase3 -d-> Pipeline3 ' Actor 4 actor \"Actor 4\" as Actor4 usecase \"\\n < $share_alt_square>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase4 Actor4 -d-> UseCase4 UseCase4 -d-> Pipeline3 ' Diamond upper area cloud \"\\n < $heart>\\n Example \\n\\nexample, example, example\\n\\n\" as DiamondUpper DiamondUpper -d-> Pipeline1 DiamondUpper -d-> Pipeline2 DiamondUpper -d-> Pipeline3 ' Diamond lower area database \"\\n < $gear>\\n Example \\n\\nexample, example, example\\n\\n\" as DiamondLower DiamondLower -u-> Pipeline1 DiamondLower -u-> Pipeline2 DiamondLower -u-> Pipeline3 ' Hinting UseCase1 -[hidden]r- UseCase2 UseCase2 -[hidden]r- DiamondUpper DiamondUpper -[hidden]r- UseCase3 UseCase3 -[hidden]r- UseCase4 ' Pipeline 1 controls control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline1Control1 control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline1Control2 Pipeline1Control1 -u-> Pipeline1 Pipeline1Control2 -u-> Pipeline1 ' Pipeline 3 controls control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline3Control1 control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline3Control2 Pipeline3Control1 -u-> Pipeline3 Pipeline3Control2 -u-> Pipeline3 @enduml C4 model \u00b6 View Source @startuml !include Person(personAlias, \"Label\", \"Optional Description\") Container(containerAlias, \"Label\", \"Technology\", \"Optional Description\") System(systemAlias, \"Label\", \"Optional Description\") System_Ext(extSystemAlias, \"Label\", \"Optional Description\") Rel(personAlias, containerAlias, \"Label\", \"Optional Technology\") Rel_U(systemAlias, extSystemAlias, \"Label\", \"Optional Technology\") @enduml C4 Model focuses diagrams on four areas: Context, Containers, Components, Code. Standard library \u00b6 View Source @startuml stdlib @enduml You can list standard library folders by using the special diagram \"stdlib\". OpenIconic list \u00b6 View Source @startuml listopeniconic @enduml You can list all the OpenIconic icon names and images by using the special diagram \"listopeniconic\".","title":"PlantUML examples"},{"location":"demo/#plantuml-examples","text":"PlantUML is a software tool that uses text formatting to create graphic diagrams. This page introduces PlantUML by showing examples with diagrams and source code, for UML, ERD, wireframes, mind maps, JSON, YAML, WBS, ASCII art, Gantt charts, C4 models, and more.","title":"PlantUML examples"},{"location":"demo/#sequence-diagram","text":"View Source @startuml skinparam monochrome true Alpha -> Bravo Bravo -> Alpha @enduml","title":"Sequence diagram"},{"location":"demo/#sequence-diagram-with-steps-and-divider","text":"View Source @startuml skinparam monochrome true Alpha -> Bravo: Step 1 Bravo -> Charlie: Step 2 == My Divider == Charlie -> Bravo: Step 3 Bravo -> Alpha: Step 4 @enduml","title":"Sequence diagram with steps and divider"},{"location":"demo/#sequence-diagram-with-participant-shapes","text":"View Source @startuml skinparam monochrome true participant Participant as Foo actor Actor as Foo1 boundary Boundary as Foo2 control Control as Foo3 entity Entity as Foo4 database Database as Foo5 collections Collections as Foo6 queue Queue as Foo7 Foo -> Foo1 : To actor Foo -> Foo2 : To boundary Foo -> Foo3 : To control Foo -> Foo4 : To entity Foo -> Foo5 : To database Foo -> Foo6 : To collections Foo -> Foo7: To queue @enduml","title":"Sequence diagram with participant shapes"},{"location":"demo/#usecase-diagram","text":"View Source @startuml skinparam monochrome true left to right direction User1 --> (Story1) (Story1) --> (Story2) (Story2) --> (Story3) @enduml","title":"Usecase diagram"},{"location":"demo/#object-diagram","text":"View Source @startuml skinparam monochrome true object Object1 { Alpha Bravo } object Object2 { Charlie Delta } object Object3 { Echo Foxtrot } Object1 < |-- Object2 Object1 < |-- Object3 @enduml","title":"Object diagram"},{"location":"demo/#class-diagram","text":"View Source @startuml skinparam monochrome true ' If you want to hide the \"C\" circle, then uncomment this line: ' hide circle class Class1 { {field} Alpha {method} Bravo } class Class2 { {field} Charlie {method} Delta } class Class3 { {field} Echo {method} Foxtrot } Class1 < |--o Class2 Class1 < |--* Class3 @enduml","title":"Class diagram"},{"location":"demo/#entity-relationship-diagram-erd","text":"View Source @startuml skinparam monochrome true skinparam linetype ortho ' If you want to hide the \"E\" circle, then uncomment this line: ' hide circle entity Entity1 { Alpha Bravo } entity Entity2 { Charlie Delta } entity Entity3 { Echo Foxtrot } Entity1 }o-down-o{ Entity2 Entity1 }o-down-o{ Entity3 @enduml","title":"Entity relationship diagram (ERD)"},{"location":"demo/#package-styles","text":"View Source @startuml package \"Demo Node\" < > { object Object1 } package \"Demo Rectangle\" < > { object Object2 } package \"Demo Folder\" < > { object Object3 } package \"Demo Frame\" < > { object Object4 } package \"Demo Cloud\" < > { object Object5 } package \"Demo Database\" < > { object Object6 } @enduml","title":"Package styles"},{"location":"demo/#activity-diagram","text":"View Source @startuml skinparam monochrome true start -> Starting; :Activity 1; if (Question) then (yes) :Option 1; else (no) :Option 2; endif :Activity 2; -> Stopping; stop @enduml","title":"Activity diagram"},{"location":"demo/#component-diagram-of-items","text":"View Source @startuml skinparam monochrome true component \"Component\" interface \"Interface\" database \"Database\" cloud \"Cloud\" node \"Node\" package \"Package\" @enduml","title":"Component diagram of items"},{"location":"demo/#state-diagram","text":"View Source @startuml skinparam monochrome true [*] --> State1 : Start State1 -> State2 : Change1 State2 -> State3 : Change2 State3 --> [*] : Stop State1 : Description 1 State2 : Description 2 State3 : Description 3 @enduml","title":"State diagram"},{"location":"demo/#deployment-diagram-items","text":"View Source @startuml skinparam monochrome true actor actor agent agent artifact artifact boundary boundary card card circle circle cloud cloud collections collections component component control control database database entity entity file file folder folder frame frame hexagon hexagon interface interface label label node node package package person person queue queue rectangle rectangle stack stack storage storage usecase usecase @enduml","title":"Deployment diagram items"},{"location":"demo/#timing-diagram","text":"View Source @startuml skinparam monochrome true concise \"My Timeline\" as T @T 0 is Alpha +100 is Bravo +100 is Charlie @50 < -> @+100 : My Note @enduml","title":"Timing diagram"},{"location":"demo/#diagrams-through-ascii-art-ditaa","text":"View Source @startuml ditaa +--------+ +-------+ +-------+ | +---+ ditaa +--> | | | Text | +-------+ |diagram| |Document| |!magic!| | | | {d}| | | | | +---+----+ +-------+ +-------+ : ^ | Lots of work | +-------------------------+ @enduml","title":"Diagrams through ASCII art (DITAA)"},{"location":"demo/#wireframe","text":"View Source @startuml salt { Hello world [Button] () Radio 1 (X) Radio 2 [] Checkbox 1 [X] Checkbox 2 \"Enter text here \" ^This is a droplist^ } @enduml","title":"Wireframe"},{"location":"demo/#gantt-chart","text":"View Source @startgantt skinparam monochrome true [Task1] on {Alice} lasts 8 days then [Task2] on {Bob} lasts 4 days at 50% then [Task3] on {Carol} lasts 2 days at 25% @endgantt","title":"Gantt chart"},{"location":"demo/#mind-map","text":"View Source @startmindmap + C ++ D ++ E -- A -- B @endmindmap","title":"Mind map"},{"location":"demo/#json-data","text":"View Source @startjson { \"fruit\":\"Apple\", \"size\":\"Large\", \"color\": [\"Red\", \"Green\"] } @endjson","title":"JSON data"},{"location":"demo/#yaml-data","text":"View Source @startyaml fruit: Apple size: Large color: - Red - Green @endyaml","title":"YAML data"},{"location":"demo/#network-diagram","text":"View Source @startuml nwdiag { network dmz { address = \"210.x.x.x/24\" web01 [address = \"210.x.x.1\"]; web02 [address = \"210.x.x.2\"]; } } @enduml","title":"Network diagram"},{"location":"demo/#work-breakdown-structure-wbs","text":"View Source @startwbs * Top ** A *** A1 *** A2 ** B *** B1 *** B2 @endwbs","title":"Work breakdown structure (WBS)"},{"location":"demo/#openiconic","text":"View Source @startuml title: < &heart> Demo < &heart> @enduml OpenIconic provides open source icons. OpenIconic is now built-in to PlantUML.","title":"OpenIconic"},{"location":"demo/#font-awesome","text":"View Source @startuml skinparam monochrome true !include <font-awesome/star> rectangle \" < $star>\" @enduml","title":"Font Awesome"},{"location":"demo/#procedure","text":"View Source @startuml !procedure $demo($name, $headline, $description) card $name as \"\\n $headline \\n\\n $description \\n\" !endprocedure $demo(MyCard, \"Hello World\", \"This is a demonstration\") @enduml","title":"Procedure"},{"location":"demo/#procedure-layout","text":"View Source @startuml skinparam monochrome true skinparam defaultTextAlignment center !procedure $layout($shape, $name, $openiconic, $headline, $description) $shape $name as \"\\n\\n < &$openiconic> \\n $headline \\n\\n $description \\n\\n\" !endprocedure $layout(card, MyCard, heart, \"Hello World\", \"This is a demonstration\") @enduml This shows how to create your own procedure to create a custom layout with a shape, object name, OpenIconic icon, headline that uses big size text, and a description that uses normal size text.","title":"Procedure layout"},{"location":"demo/#area-diagram","text":"The area diagram is an example deployment diagram that shows a bunch of areas and how they interrlate. This example is useful for seeing a real-world diagram, that uses boxes, arrows, Font Awesome icons, multi-line text, Unicode padding, font sizes, and more. View Source @startuml skinparam monochrome true skinparam defaultTextAlignment center ' icons !include !include !include !include !include !include !include !include !include !include !include ' Pipeline objects stack \"\" Example \\n\\nexample\\nexample\\nexample\"\" as StackLeft card \" < $cubes>\\n Example \\n\\n example, example, example \\n\\n\" as Pipeline1 queue \" < $check_circle>\\n Example \\n\\n example, example, example \\n\\n\" as Pipeline2 card \" < $cloud>\\n Example \\n\\n example, example, example \\n\\n\" as Pipeline3 stack \" Example \\n\\nexample\\nexample\\nexample\" as StackRight ' Pipeline flow StackLeft -r-> Pipeline1 : \"Example\" Pipeline1 -r-> Pipeline2 : \"Example\" Pipeline2 -r-> Pipeline3 : \"Example\" Pipeline3 -r-> StackRight : \"Example\" ' Left side interface \"Example\" as InterfaceLeft InterfaceLeft -u-> StackLeft ' Right side interface \"Example\" as InterfaceRight InterfaceRight -u-> StackRight ' Actor 1 actor \"Actor 1\" as Actor1 usecase \"\\n < $file_image_o>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase1 Actor1 -d-> UseCase1 UseCase1 -d-> Pipeline1 ' Actor 2 actor \"Actor 2\" as Actor2 usecase \"\\n < $file_code_o>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase2 Actor2 -d-> UseCase2 UseCase2 -d-> Pipeline1 ' Actor 3 actor \"Actor 3\" as Actor3 usecase \"\\n < $exchange>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase3 Actor3 -d-> UseCase3 UseCase3 -d-> Pipeline3 ' Actor 4 actor \"Actor 4\" as Actor4 usecase \"\\n < $share_alt_square>\\n Example \\n\\nexample\\nexample\\nexample\\n\\n\" as UseCase4 Actor4 -d-> UseCase4 UseCase4 -d-> Pipeline3 ' Diamond upper area cloud \"\\n < $heart>\\n Example \\n\\nexample, example, example\\n\\n\" as DiamondUpper DiamondUpper -d-> Pipeline1 DiamondUpper -d-> Pipeline2 DiamondUpper -d-> Pipeline3 ' Diamond lower area database \"\\n < $gear>\\n Example \\n\\nexample, example, example\\n\\n\" as DiamondLower DiamondLower -u-> Pipeline1 DiamondLower -u-> Pipeline2 DiamondLower -u-> Pipeline3 ' Hinting UseCase1 -[hidden]r- UseCase2 UseCase2 -[hidden]r- DiamondUpper DiamondUpper -[hidden]r- UseCase3 UseCase3 -[hidden]r- UseCase4 ' Pipeline 1 controls control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline1Control1 control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline1Control2 Pipeline1Control1 -u-> Pipeline1 Pipeline1Control2 -u-> Pipeline1 ' Pipeline 3 controls control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline3Control1 control \" Example \\n\\nexample\\nexample\\nexample\" as Pipeline3Control2 Pipeline3Control1 -u-> Pipeline3 Pipeline3Control2 -u-> Pipeline3 @enduml","title":"Area diagram"},{"location":"demo/#c4-model","text":"View Source @startuml !include Person(personAlias, \"Label\", \"Optional Description\") Container(containerAlias, \"Label\", \"Technology\", \"Optional Description\") System(systemAlias, \"Label\", \"Optional Description\") System_Ext(extSystemAlias, \"Label\", \"Optional Description\") Rel(personAlias, containerAlias, \"Label\", \"Optional Technology\") Rel_U(systemAlias, extSystemAlias, \"Label\", \"Optional Technology\") @enduml C4 Model focuses diagrams on four areas: Context, Containers, Components, Code.","title":"C4 model"},{"location":"demo/#standard-library","text":"View Source @startuml stdlib @enduml You can list standard library folders by using the special diagram \"stdlib\".","title":"Standard library"},{"location":"demo/#openiconic-list","text":"View Source @startuml listopeniconic @enduml You can list all the OpenIconic icon names and images by using the special diagram \"listopeniconic\".","title":"OpenIconic list"},{"location":"romeo/","text":"Ansible output \u00b6 Versie \u00b6 PE_zooi 1.0.2","title":"Ansible output"},{"location":"romeo/#ansible-output","text":"","title":"Ansible output"},{"location":"romeo/#versie","text":"PE_zooi 1.0.2","title":"Versie"},{"location":"template0/","text":"Template Service Specificatie \u00b6 Service overzicht \u00b6 Item Servicenaam Serviceversie Service beschrijving Opmerkingen Datum in productie Datum vervallen Service eigenaar Naam van de eigenaar, e-mailadres, afnemer Afname locatie ESB Post21, PIADD, KA (verwijder wat niet van toepassing is) Roadmap \u00b6 Voor de service staan de volgende wijzigingen op de planning: \u00b6 Service Abstract \u00b6 Kort en bondige beschrijving van de service Servicecontext \u00b6 Context van de service in woord en beeld Context Service operaties \u00b6 Operatie 1 \u00b6 Omschrijving Functionaliteit van de operatie Trigger Interface beschrijving Figuur 1 Samenhang berichtelementen van Operatie 1, voor het XML bericht zie Appendix A Interactie patroon Deze service werkt volgens het volgende patroon: In-Only (one-way) In Out (Synchroon, Request-Response) In Out (Asynchroon, Request-Response) Out Only (Notification) Out In (Solicit-Response) Observeerbaar gedrag Gedrag Basis flow (happy flow) 1. publiceert het bericht 2. De service ontvangt het bericht [1], vertaalt het [2] en stelt het beschikbaar aan de afnemer 3. De service levert het bericht af bij de afnemer [3] 4. Service operatie is klaar Alternatieve flows Geef aan of er andere scenario\u2019s mogelijk zijn Exceptie flows Geef aan hoe de service met excepties omgaat Security Geen additionele beveiligingsmaatregelen nodig buiten de standaard ESB maatregelen. OF Deze service maakt gebruik van WS Security | Basic Authentication. Performance | Karakteristiek | Omschrijving | |----------------|----------------| | Avg # Requests | | | Max # Requests | | | Avg Latency (sec) | < > | | Max Latency (sec) | | | Peaktime | | | Avg Message size | | | Max Message size | | | Quality of Service | - Best Effort | | | - At Least Once | | | - Exactly Once | Document informatie \u00b6 Referenties \u00b6 Referentie Document CDM ProRail CDM - Richtlijnen en Beheer AUTH-BRON Authentieke bronnen en eigenaarschap gegevens, IB en ICT-S/AI&B AUTH-BRON-LIJST Lijst authentieke bronnen en gegevenseigenaren, IB en ICT-S/AI&B PIA ProRail Integratie Architectuur SD Afkortingen \u00b6 Term Betekenis ESB Enterprise Service Bus Versiebeheer \u00b6 Versie Datum Auteur Wijzigingen dd-mm-jjjj Schema's \u00b6 Bericht \u00b6 CMM XSD \u00b6 op aparte tab","title":"Template0"},{"location":"template0/#template-service-specificatie","text":"","title":"Template Service Specificatie"},{"location":"template0/#service-overzicht","text":"Item Servicenaam Serviceversie Service beschrijving Opmerkingen Datum in productie Datum vervallen Service eigenaar Naam van de eigenaar, e-mailadres, afnemer Afname locatie ESB Post21, PIADD, KA (verwijder wat niet van toepassing is)","title":"Service overzicht"},{"location":"template0/#roadmap","text":"","title":"Roadmap"},{"location":"template0/#voor-de-service-staan-de-volgende-wijzigingen-op-de-planning","text":"","title":"Voor de service staan de volgende wijzigingen op de planning:"},{"location":"template0/#service-abstract","text":"Kort en bondige beschrijving van de service","title":"Service Abstract"},{"location":"template0/#servicecontext","text":"Context van de service in woord en beeld Context","title":"Servicecontext"},{"location":"template0/#service-operaties","text":"","title":"Service operaties"},{"location":"template0/#operatie-1","text":"Omschrijving Functionaliteit van de operatie Trigger Interface beschrijving Figuur 1 Samenhang berichtelementen van Operatie 1, voor het XML bericht zie Appendix A Interactie patroon Deze service werkt volgens het volgende patroon: In-Only (one-way) In Out (Synchroon, Request-Response) In Out (Asynchroon, Request-Response) Out Only (Notification) Out In (Solicit-Response) Observeerbaar gedrag Gedrag Basis flow (happy flow) 1. publiceert het bericht 2. De service ontvangt het bericht [1], vertaalt het [2] en stelt het beschikbaar aan de afnemer 3. De service levert het bericht af bij de afnemer [3] 4. Service operatie is klaar Alternatieve flows Geef aan of er andere scenario\u2019s mogelijk zijn Exceptie flows Geef aan hoe de service met excepties omgaat Security Geen additionele beveiligingsmaatregelen nodig buiten de standaard ESB maatregelen. OF Deze service maakt gebruik van WS Security | Basic Authentication. Performance | Karakteristiek | Omschrijving | |----------------|----------------| | Avg # Requests | | | Max # Requests | | | Avg Latency (sec) | < > | | Max Latency (sec) | | | Peaktime | | | Avg Message size | | | Max Message size | | | Quality of Service | - Best Effort | | | - At Least Once | | | - Exactly Once |","title":"Operatie 1"},{"location":"template0/#document-informatie","text":"","title":"Document informatie"},{"location":"template0/#referenties","text":"Referentie Document CDM ProRail CDM - Richtlijnen en Beheer AUTH-BRON Authentieke bronnen en eigenaarschap gegevens, IB en ICT-S/AI&B AUTH-BRON-LIJST Lijst authentieke bronnen en gegevenseigenaren, IB en ICT-S/AI&B PIA ProRail Integratie Architectuur SD","title":"Referenties"},{"location":"template0/#afkortingen","text":"Term Betekenis ESB Enterprise Service Bus","title":"Afkortingen"},{"location":"template0/#versiebeheer","text":"Versie Datum Auteur Wijzigingen dd-mm-jjjj","title":"Versiebeheer"},{"location":"template0/#schemas","text":"","title":"Schema's"},{"location":"template0/#bericht","text":"","title":"Bericht "},{"location":"template0/#cmm-xsd","text":"op aparte tab","title":"CMM XSD"},{"location":"details/component01/","text":"Hallo \u00b6","title":"Component01"},{"location":"details/component01/#hallo","text":"","title":"Hallo"}]}